{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar _a, _b, _c, _d;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trace = exports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;\n\nconst constants_1 = require(\"./constants\");\n\nlet _logger = console;\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\nconst verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : '';\n\nswitch (verbosityString.toUpperCase()) {\n  case 'DEBUG':\n    _logVerbosity = constants_1.LogVerbosity.DEBUG;\n    break;\n\n  case 'INFO':\n    _logVerbosity = constants_1.LogVerbosity.INFO;\n    break;\n\n  case 'ERROR':\n    _logVerbosity = constants_1.LogVerbosity.ERROR;\n    break;\n\n  case 'NONE':\n    _logVerbosity = constants_1.LogVerbosity.NONE;\n    break;\n\n  default: // Ignore any other values\n\n}\n\nexports.getLogger = () => {\n  return _logger;\n};\n\nexports.setLogger = logger => {\n  _logger = logger;\n};\n\nexports.setLoggerVerbosity = verbosity => {\n  _logVerbosity = verbosity;\n}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nexports.log = (severity, ...args) => {\n  if (severity >= _logVerbosity && typeof _logger.error === 'function') {\n    _logger.error(...args);\n  }\n};\n\nconst tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : '';\nconst enabledTracers = new Set();\nconst disabledTracers = new Set();\n\nfor (const tracerName of tracersString.split(',')) {\n  if (tracerName.startsWith('-')) {\n    disabledTracers.add(tracerName.substring(1));\n  } else {\n    enabledTracers.add(tracerName);\n  }\n}\n\nconst allEnabled = enabledTracers.has('all');\n\nfunction trace(severity, tracer, text) {\n  if (!disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer))) {\n    exports.log(severity, new Date().toISOString() + ' | ' + tracer + ' | ' + text);\n  }\n}\n\nexports.trace = trace;","map":{"version":3,"sources":["../../src/logging.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;AAeG;;;;;;;;;AAEH,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,IAAI,OAAO,GAAqB,OAAhC;AACA,IAAI,aAAa,GAAiB,WAAA,CAAA,YAAA,CAAa,KAA/C;AAEA,MAAM,eAAe,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAG,OAAO,CAAC,GAAR,CAAY,mBAAf,MAAkC,IAAlC,IAAkC,EAAA,KAAA,KAAA,CAAlC,GAAkC,EAAlC,GAAsC,OAAO,CAAC,GAAR,CAAY,cAAlD,MAAgE,IAAhE,IAAgE,EAAA,KAAA,KAAA,CAAhE,GAAgE,EAAhE,GAAoE,EAAzF;;AAEA,QAAQ,eAAe,CAAC,WAAhB,EAAR;AACE,OAAK,OAAL;AACE,IAAA,aAAa,GAAG,WAAA,CAAA,YAAA,CAAa,KAA7B;AACA;;AACF,OAAK,MAAL;AACE,IAAA,aAAa,GAAG,WAAA,CAAA,YAAA,CAAa,IAA7B;AACA;;AACF,OAAK,OAAL;AACE,IAAA,aAAa,GAAG,WAAA,CAAA,YAAA,CAAa,KAA7B;AACA;;AACF,OAAK,MAAL;AACE,IAAA,aAAa,GAAG,WAAA,CAAA,YAAA,CAAa,IAA7B;AACA;;AACF,UAbF,CAcE;;AAdF;;AAiBa,OAAA,CAAA,SAAA,GAAY,MAAuB;AAC9C,SAAO,OAAP;AACD,CAFY;;AAIA,OAAA,CAAA,SAAA,GAAa,MAAD,IAAmC;AAC1D,EAAA,OAAO,GAAG,MAAV;AACD,CAFY;;AAIA,OAAA,CAAA,kBAAA,GAAsB,SAAD,IAAkC;AAClE,EAAA,aAAa,GAAG,SAAhB;AACD,CAFY,C,CAIb;;;AACa,OAAA,CAAA,GAAA,GAAM,CAAC,QAAD,EAAyB,GAAG,IAA5B,KAAiD;AAClE,MAAI,QAAQ,IAAI,aAAZ,IAA6B,OAAO,OAAO,CAAC,KAAf,KAAyB,UAA1D,EAAsE;AACpE,IAAA,OAAO,CAAC,KAAR,CAAc,GAAG,IAAjB;AACD;AACF,CAJY;;AAMb,MAAM,aAAa,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAG,OAAO,CAAC,GAAR,CAAY,eAAf,MAA8B,IAA9B,IAA8B,EAAA,KAAA,KAAA,CAA9B,GAA8B,EAA9B,GAAkC,OAAO,CAAC,GAAR,CAAY,UAA9C,MAAwD,IAAxD,IAAwD,EAAA,KAAA,KAAA,CAAxD,GAAwD,EAAxD,GAA4D,EAA/E;AACA,MAAM,cAAc,GAAG,IAAI,GAAJ,EAAvB;AACA,MAAM,eAAe,GAAG,IAAI,GAAJ,EAAxB;;AACA,KAAK,MAAM,UAAX,IAAyB,aAAa,CAAC,KAAd,CAAoB,GAApB,CAAzB,EAAmD;AACjD,MAAI,UAAU,CAAC,UAAX,CAAsB,GAAtB,CAAJ,EAAgC;AAC9B,IAAA,eAAe,CAAC,GAAhB,CAAoB,UAAU,CAAC,SAAX,CAAqB,CAArB,CAApB;AACD,GAFD,MAEO;AACL,IAAA,cAAc,CAAC,GAAf,CAAmB,UAAnB;AACD;AACF;;AACD,MAAM,UAAU,GAAG,cAAc,CAAC,GAAf,CAAmB,KAAnB,CAAnB;;AAEA,SAAgB,KAAhB,CACE,QADF,EAEE,MAFF,EAGE,IAHF,EAGc;AAEZ,MAAI,CAAC,eAAe,CAAC,GAAhB,CAAoB,MAApB,CAAD,KAAiC,UAAU,IAAI,cAAc,CAAC,GAAf,CAAmB,MAAnB,CAA/C,CAAJ,EAAgF;AAC9E,IAAA,OAAA,CAAA,GAAA,CAAI,QAAJ,EAAc,IAAI,IAAJ,GAAW,WAAX,KAA2B,KAA3B,GAAmC,MAAnC,GAA4C,KAA5C,GAAoD,IAAlE;AACD;AACF;;AARD,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.trace = exports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;\nconst constants_1 = require(\"./constants\");\nlet _logger = console;\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\nconst verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : '';\nswitch (verbosityString.toUpperCase()) {\n    case 'DEBUG':\n        _logVerbosity = constants_1.LogVerbosity.DEBUG;\n        break;\n    case 'INFO':\n        _logVerbosity = constants_1.LogVerbosity.INFO;\n        break;\n    case 'ERROR':\n        _logVerbosity = constants_1.LogVerbosity.ERROR;\n        break;\n    case 'NONE':\n        _logVerbosity = constants_1.LogVerbosity.NONE;\n        break;\n    default:\n    // Ignore any other values\n}\nexports.getLogger = () => {\n    return _logger;\n};\nexports.setLogger = (logger) => {\n    _logger = logger;\n};\nexports.setLoggerVerbosity = (verbosity) => {\n    _logVerbosity = verbosity;\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexports.log = (severity, ...args) => {\n    if (severity >= _logVerbosity && typeof _logger.error === 'function') {\n        _logger.error(...args);\n    }\n};\nconst tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : '';\nconst enabledTracers = new Set();\nconst disabledTracers = new Set();\nfor (const tracerName of tracersString.split(',')) {\n    if (tracerName.startsWith('-')) {\n        disabledTracers.add(tracerName.substring(1));\n    }\n    else {\n        enabledTracers.add(tracerName);\n    }\n}\nconst allEnabled = enabledTracers.has('all');\nfunction trace(severity, tracer, text) {\n    if (!disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer))) {\n        exports.log(severity, new Date().toISOString() + ' | ' + tracer + ' | ' + text);\n    }\n}\nexports.trace = trace;\n//# sourceMappingURL=logging.js.map"]},"metadata":{},"sourceType":"script"}