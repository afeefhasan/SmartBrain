{"ast":null,"code":"var _jsxFileName = \"D:\\\\smartbrain\\\\src\\\\containers\\\\App.js\";\nimport React, { Component } from 'react';\nimport ImageLinkForm from '../components/ImageLinkForm/ImageLinkForm';\nimport Logo from '../components/Logo/Logo';\nimport Navigation from '../components/Navigation/Navigation';\nimport Rank from '../components/Rank/Rank';\nimport Particles from 'react-particles-js';\nimport './App.css';\nimport { ClarifaiStub, grpc } from \"clarifai-nodejs-grpc\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stub = ClarifaiStub.grpc(); // This will be used by every Clarifai endpoint call.\n\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key {95ba94e97294463c9e0f590c8670d199}\");\nconst ParticleOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onUpdate = event => {\n      console.log(event.target.value);\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onImageSubmit = () => {\n      console.log('click');\n      stub.PostModelOutputs({\n        model_id: \"1e08e61c48404a269950b69317c520d4\",\n        // This is optional. Defaults to the latest model version.\n        inputs: [{\n          data: {\n            image: {\n              url: \"https://samples.clarifai.com/metro-north.jpg\"\n            }\n          }\n        }]\n      }, metadata, (err, response) => {\n        if (err) {\n          throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n          throw new Error(\"Post model outputs failed, status: \" + response.status.description);\n        } // Since we have one input, one output will exist here.\n\n\n        const output = response.outputs[0];\n        console.log(\"Predicted concepts:\");\n\n        for (const concept of output.data.concepts) {\n          console.log(concept.name + \" \" + concept.value);\n        }\n      });\n    };\n\n    this.state = {\n      input: ''\n    };\n    this.onUpdate = this.onUpdate.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        params: ParticleOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onUpdate: this.onUpdate,\n        onImageSubmit: this.onImageSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/smartbrain/src/containers/App.js"],"names":["React","Component","ImageLinkForm","Logo","Navigation","Rank","Particles","ClarifaiStub","grpc","stub","metadata","Metadata","set","ParticleOptions","particles","number","value","density","enable","value_area","App","constructor","props","onUpdate","event","console","log","target","setState","input","onImageSubmit","PostModelOutputs","model_id","inputs","data","image","url","err","response","Error","status","code","description","output","outputs","concept","concepts","name","state","bind","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ImageLinkForm from '../components/ImageLinkForm/ImageLinkForm';\r\nimport Logo from '../components/Logo/Logo';\r\nimport Navigation from '../components/Navigation/Navigation';\r\nimport Rank from '../components/Rank/Rank';\r\nimport Particles from 'react-particles-js';\r\nimport './App.css';\r\nimport {ClarifaiStub, grpc} from \"clarifai-nodejs-grpc\";\r\nconst stub = ClarifaiStub.grpc();\r\n\r\n// This will be used by every Clarifai endpoint call.\r\nconst metadata = new grpc.Metadata();\r\nmetadata.set(\"authorization\", \"Key {95ba94e97294463c9e0f590c8670d199}\");\r\nconst ParticleOptions={\r\n  particles: {\r\n    number:{\r\n      value:30,\r\n      density:{\r\n        enable:true,\r\n        value_area:800\r\n      }\r\n    }\r\n}\r\n}\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      input:'',\r\n    }\r\n    this.onUpdate = this.onUpdate.bind(this);\r\n  }\r\n  onUpdate = (event)=>{\r\n    console.log(event.target.value)\r\n    this.setState({input:event.target.value})\r\n  }\r\n  onImageSubmit = ()=>{\r\n    console.log('click')\r\n\r\nstub.PostModelOutputs(\r\n  {\r\n      model_id: \"1e08e61c48404a269950b69317c520d4\",\r\n       // This is optional. Defaults to the latest model version.\r\n      inputs: [\r\n          {data: {image: {url: \"https://samples.clarifai.com/metro-north.jpg\"}}}\r\n      ]\r\n  },\r\n  metadata,\r\n  (err, response) => {\r\n      if (err) {\r\n          throw new Error(err);\r\n      }\r\n\r\n      if (response.status.code !== 10000) {\r\n          throw new Error(\"Post model outputs failed, status: \" + response.status.description);\r\n      }\r\n\r\n      // Since we have one input, one output will exist here.\r\n      const output = response.outputs[0];\r\n\r\n      console.log(\"Predicted concepts:\");\r\n      for (const concept of output.data.concepts) {\r\n          console.log(concept.name + \" \" + concept.value);\r\n      }\r\n  }\r\n);\r\n\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"App\">\r\n        <Particles className=\"particles\" params={ParticleOptions} />\r\n         <Navigation />\r\n         <Logo />\r\n         <Rank />\r\n         <ImageLinkForm onUpdate={this.onUpdate} onImageSubmit={this.onImageSubmit}/>\r\n      </div>\r\n     \r\n  \r\n    );\r\n  }\r\n \r\n  \r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}